DynamoDB table
=======================================================================================
Terraform uses DynamoDB table (the one you specified: terraform-state-lock) to place a 
lock whenever you run a command (plan, apply, etc.) so that two people (or processes) 
don’t try to update the state at the same time.

===> Manually unlock state file with Terraform
terraform force-unlock <LOCK_ID>

Terraform is still holding on to an old state or the backend configuration wasn’t refreshed.
============================================================================================
- Steps to refresh Terraform with new code
===> Reinitialize Terraform (so it re-reads your updated files):
terraform init -reconfigure

- Validate your new code to make sure there are no syntax errors:
======> terraform validate

- See what Terraform plans to do with the updated code:
=====> terraform plan

- Apply the changes:
=====> terraform apply


================================ Data Sources ==========================================
- In Terraform, there are two main things you work with:

=> 1. Resources → Things Terraform creates or manages.
Example:

resource "aws_db_instance" "mydb" {
  # creates a new RDS instance
}

=> 2. Data Sources → Things Terraform reads / looks up (already exist in AWS) 
so you can use them in your configuration.
Example:

data "aws_db_snapshot" "example" {
  most_recent            = true
  db_instance_identifier = "mydb-instance"
}


- So, what does data "aws_db_snapshot" mean?
It tells Terraform:
👉 “Don’t create a new snapshot. Instead, go and find an existing 
snapshot in AWS and make its information available for me to use.”























